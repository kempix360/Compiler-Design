Maksymilian Kempa
yytext              Token type      Token value as string

MODULE              KW_MODULE       
test                IDENT           test
;                   ;               
FROM                KW_FROM         
InOut               IDENT           InOut
IMPORT              KW_IMPORT       
Write               IDENT           Write
,                   ,               
WriteCard           IDENT           WriteCard
,                   ,               
WriteString         IDENT           WriteString
,                   ,               
WriteLn             IDENT           WriteLn
;                   ;               
===== FOUND: IMPORT 'InOut'=====
CONST               KW_CONST        
FromAscii           IDENT           FromAscii
=                   =               
32                  INTEGER_CONST   32
===== FOUND: CONST_DECL 'FromAscii'=====
;                   ;               
ToAscii             IDENT           ToAscii
=                   =               
127                 INTEGER_CONST   127
===== FOUND: CONST_DECL 'ToAscii'=====
;                   ;               
VAR                 KW_VAR          
i                   IDENT           i
:                   :               
CARDINAL            IDENT           CARDINAL
===== FOUND: VAR_DECL =====
;                   ;               
fl                  IDENT           fl
:                   :               
REAL                IDENT           REAL
===== FOUND: VAR_DECL =====
;                   ;               
t                   IDENT           t
:                   :               
ARRAY               KW_ARRAY        
[                   [               
1                   INTEGER_CONST   1
..                  RANGE           
10                  INTEGER_CONST   10
]                   ]               
OF                  KW_OF           
CARDINAL            IDENT           CARDINAL
===== FOUND: VAR_DECL =====
;                   ;               
d                   IDENT           d
:                   :               
RECORD              KW_RECORD       
year                IDENT           year
,                   ,               
month               IDENT           month
:                   :               
CARDINAL            IDENT           CARDINAL
;                   ;               
day                 IDENT           day
:                   :               
CARDINAL            IDENT           CARDINAL
;                   ;               
END                 KW_END          
===== FOUND: VAR_DECL =====
;                   ;               
PROCEDURE           KW_PROCEDURE    
ListAscii           IDENT           ListAscii
(                   (               
StartCode           IDENT           StartCode
,                   ,               
EndCode             IDENT           EndCode
:                   :               
CARDINAL            IDENT           CARDINAL
;                   ;               
===== FOUND: FP_SECTION =====
Precision           IDENT           Precision
:                   :               
CARDINAL            IDENT           CARDINAL
)                   )               
===== FOUND: FP_SECTION =====
;                   ;               
===== FOUND: PROC_HEAD 'ListAscii'=====
VAR                 KW_VAR          
i                   IDENT           i
:                   :               
CARDINAL            IDENT           CARDINAL
===== FOUND: VAR_DECL =====
;                   ;               
t1                  IDENT           t1
:                   :               
ARRAY               KW_ARRAY        
[                   [               
1                   INTEGER_CONST   1
..                  RANGE           
10                  INTEGER_CONST   10
]                   ]               
OF                  KW_OF           
CARDINAL            IDENT           CARDINAL
===== FOUND: VAR_DECL =====
;                   ;               
d                   IDENT           d
:                   :               
RECORD              KW_RECORD       
year                IDENT           year
:                   :               
CARDINAL            IDENT           CARDINAL
;                   ;               
month               IDENT           month
,                   ,               
day                 IDENT           day
:                   :               
CARDINAL            IDENT           CARDINAL
;                   ;               
END                 KW_END          
===== FOUND: VAR_DECL =====
;                   ;               
BEGIN               KW_BEGIN        
WriteString         IDENT           WriteString
(                   (               
"ASCII codes"       STRING_CONST    "ASCII codes"
)                   )               
===== FOUND: PROCEDURE_CALL 'WriteString'=====
;                   ;               
WriteLn             IDENT           WriteLn
;                   ;               
===== FOUND: PROCEDURE_CALL 'WriteLn'=====
FOR                 KW_FOR          
i                   IDENT           i
:=                  ASSIGN          
FromAscii           IDENT           FromAscii
TO                  KW_TO           
ToAscii             IDENT           ToAscii
DO                  KW_DO           
WriteCard           IDENT           WriteCard
(                   (               
i                   IDENT           i
,                   ,               
3                   INTEGER_CONST   3
)                   )               
===== FOUND: PROCEDURE_CALL 'WriteCard'=====
;                   ;               
Write               IDENT           Write
(                   (               
' '                 CHAR_CONST      ' '
)                   )               
===== FOUND: PROCEDURE_CALL 'Write'=====
;                   ;               
Write               IDENT           Write
(                   (               
CHR                 IDENT           CHR
(                   (               
i                   IDENT           i
)                   )               
===== FOUND: PROCEDURE_CALL 'CHR'=====
)                   )               
===== FOUND: PROCEDURE_CALL 'Write'=====
;                   ;               
WriteLn             IDENT           WriteLn
END                 KW_END          
===== FOUND: PROCEDURE_CALL 'WriteLn'=====
Segmentation fault (core dumped)
